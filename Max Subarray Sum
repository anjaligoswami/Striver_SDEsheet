// Brute Force

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n= nums.size();
        int maxi = INT_MIN;
        for(int i=0; i<n; i++)
        {
            for(int j=i; j<n; j++)
            {
                int sum = 0;
                for(int k=i ; k<=j ; k++)
                {
                    sum+= nums[k];
                }

                maxi = max(maxi, sum);
            }
        }

        return maxi;
    }
};

// Better solution

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n= nums.size();
        int maxi = INT_MIN;
        for(int i=0; i<n; i++)
        {  
            int sum = 0;
            for(int j=i; j<n; j++)
            {
                
                sum+= nums[j];
                maxi = max(maxi, sum);
            }
        }

        return maxi;
    }
};

// Optimized ( using kadane's algorithm )

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n= nums.size();
        int maxi = INT_MIN;
        int sum=0;
        for(int i=0; i<n; i++)
        {  
            sum+= nums[i];
            if(sum<0)
            sum=0;

            maxi= max( sum, maxi);
           
        }

        if(maxi==0 && n>0)
        {
            int minNeg = nums[0]; 
            for(int i=0; i<n; i++)
            {  
                sum+= nums[i];
                if(minNeg<nums[i])
                minNeg = nums[i];
            
            }

            return minNeg;

        }

        return maxi;
    }
};
